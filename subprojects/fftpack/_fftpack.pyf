!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _fftpack
    interface
    subroutine cfft1i(n,wsave,lensav,ier) ! in cfft1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cfft1i
    subroutine cfft1b(n,inc,c,lenc,wsave,lensav,work,lenwrk,ier) ! in cfft1b.f
        integer :: n
        integer :: inc
        complex dimension(lenc) :: c
        integer, optional,check(shape(c, 0) == lenc),depend(c) :: lenc=shape(c, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfft1b
    subroutine cfft1f(n,inc,c,lenc,wsave,lensav,work,lenwrk,ier) ! in cfft1f.f
        integer :: n
        integer :: inc
        complex dimension(lenc) :: c
        integer, optional,check(shape(c, 0) == lenc),depend(c) :: lenc=shape(c, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfft1f
    subroutine cfft2i(l,m,wsave,lensav,ier) ! in cfft2i.f
        integer :: l
        integer :: m
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cfft2i
    subroutine cfft2b(ldim,l,m,c,wsave,lensav,work,lenwrk,ier) ! in cfft2b.f
        integer, optional,check(shape(c, 0) == ldim),depend(c) :: ldim=shape(c, 0)
        integer :: l
        integer, optional,check(shape(c, 1) == m),depend(c) :: m=shape(c, 1)
        complex dimension(ldim,m) :: c
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfft2b
    subroutine cfft2f(ldim,l,m,c,wsave,lensav,work,lenwrk,ier) ! in cfft2f.f
        integer, optional,check(shape(c, 0) == ldim),depend(c) :: ldim=shape(c, 0)
        integer :: l
        integer, optional,check(shape(c, 1) == m),depend(c) :: m=shape(c, 1)
        complex dimension(ldim,m) :: c
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfft2f
    subroutine cfftmi(n,wsave,lensav,ier) ! in cfftmi.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cfftmi
    subroutine cfftmb(lot,jump,n,inc,c,lenc,wsave,lensav,work,lenwrk,ier) ! in cfftmb.f
        integer :: lot
        integer :: jump
        integer :: n
        integer :: inc
        complex dimension(lenc) :: c
        integer, optional,check(shape(c, 0) == lenc),depend(c) :: lenc=shape(c, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfftmb
    subroutine cfftmf(lot,jump,n,inc,c,lenc,wsave,lensav,work,lenwrk,ier) ! in cfftmf.f
        integer :: lot
        integer :: jump
        integer :: n
        integer :: inc
        complex dimension(lenc) :: c
        integer, optional,check(shape(c, 0) == lenc),depend(c) :: lenc=shape(c, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cfftmf
    subroutine rfft1i(n,wsave,lensav,ier) ! in rfft1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine rfft1i
    subroutine rfft1b(n,inc,r,lenr,wsave,lensav,work,lenwrk,ier) ! in rfft1b.f
        integer :: n
        integer :: inc
        real dimension(lenr) :: r
        integer, optional,check(shape(r, 0) == lenr),depend(r) :: lenr=shape(r, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfft1b
    subroutine rfft1f(n,inc,r,lenr,wsave,lensav,work,lenwrk,ier) ! in rfft1f.f
        integer :: n
        integer :: inc
        real dimension(lenr) :: r
        integer, optional,check(shape(r, 0) == lenr),depend(r) :: lenr=shape(r, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfft1f
    subroutine rfft2i(l,m,wsave,lensav,ier) ! in rfft2i.f
        integer :: l
        integer :: m
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine rfft2i
    subroutine rfft2b(ldim,l,m,r,wsave,lensav,work,lenwrk,ier) ! in rfft2b.f
        integer, optional,check(shape(r, 0) == ldim),depend(r) :: ldim=shape(r, 0)
        integer :: l
        integer, optional,check(shape(r, 1) == m),depend(r) :: m=shape(r, 1)
        real dimension(ldim,m) :: r
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfft2b
    subroutine rfft2f(ldim,l,m,r,wsave,lensav,work,lenwrk,ier) ! in rfft2f.f
        integer, optional,check(shape(r, 0) == ldim),depend(r) :: ldim=shape(r, 0)
        integer :: l
        integer, optional,check(shape(r, 1) == m),depend(r) :: m=shape(r, 1)
        real dimension(ldim,m) :: r
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfft2f
    subroutine rfftmi(n,wsave,lensav,ier) ! in rfftmi.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine rfftmi
    subroutine rfftmb(lot,jump,n,inc,r,lenr,wsave,lensav,work,lenwrk,ier) ! in rfftmb.f
        integer :: lot
        integer :: jump
        integer :: n
        integer :: inc
        real dimension(lenr) :: r
        integer, optional,check(shape(r, 0) == lenr),depend(r) :: lenr=shape(r, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfftmb
    subroutine rfftmf(lot,jump,n,inc,r,lenr,wsave,lensav,work,lenwrk,ier) ! in rfftmf.f
        integer :: lot
        integer :: jump
        integer :: n
        integer :: inc
        real dimension(lenr) :: r
        integer, optional,check(shape(r, 0) == lenr),depend(r) :: lenr=shape(r, 0)
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine rfftmf
    subroutine cost1i(n,wsave,lensav,ier) ! in cost1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cost1i
    subroutine cost1b(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cost1b.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cost1b
    subroutine cost1f(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cost1f.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cost1f
    subroutine costmi(n,wsave,lensav,ier) ! in costmi.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine costmi
    subroutine costmb(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in costmb.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine costmb
    subroutine costmf(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in costmf.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine costmf
    subroutine sint1i(n,wsave,lensav,ier) ! in sint1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine sint1i
    subroutine sint1b(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sint1b.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sint1b
    subroutine sint1f(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sint1f.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sint1f
    subroutine cosq1i(n,wsave,lensav,ier) ! in cosq1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cosq1i
    subroutine cosq1b(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cosq1b.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cosq1b
    subroutine cosq1f(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cosq1f.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cosq1f
    subroutine cosqmi(n,wsave,lensav,ier) ! in cosqmi.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine cosqmi
    subroutine cosqmb(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cosqmb.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cosqmb
    subroutine cosqmf(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in cosqmf.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine cosqmf
    subroutine sinq1i(n,wsave,lensav,ier) ! in sinq1i.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine sinq1i
    subroutine sinq1b(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sinq1b.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sinq1b
    subroutine sinq1f(n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sinq1f.f
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sinq1f
    subroutine sinqmi(n,wsave,lensav,ier) ! in sinqmi.f
        integer :: n
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        integer :: ier
    end subroutine sinqmi
    subroutine sinqmb(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sinqmb.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sinqmb
    subroutine sinqmf(lot,jump,n,inc,x,lenx,wsave,lensav,work,lenwrk,ier) ! in sinqmf.f
        integer :: lot
        integer :: jump
        integer :: n
        integer, optional,check(shape(x, 0) == inc),depend(x) :: inc=shape(x, 0)
        real dimension(inc,*) :: x
        integer :: lenx
        real dimension(lensav) :: wsave
        integer, optional,check(shape(wsave, 0) == lensav),depend(wsave) :: lensav=shape(wsave, 0)
        real dimension(lenwrk) :: work
        integer, optional,check(shape(work, 0) == lenwrk),depend(work) :: lenwrk=shape(work, 0)
        integer :: ier
    end subroutine sinqmf
    end interface
end python module _fftpack    


! This file was auto-generated with f2py (version:2.2.0).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
